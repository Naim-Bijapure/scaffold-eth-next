/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { YourContract, YourContractInterface } from "../YourContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "startingPurpose",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "purpose",
        type: "string",
      },
    ],
    name: "SetPurpose",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "arr",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "getArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "mappedData",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "newPuprpose",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "purpose",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "yourAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "diffAddress",
        type: "address",
      },
    ],
    name: "setAddresses",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum YourContract.Status",
        name: "_status",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "setEnumStatus",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "setMappings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_newPurpose",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "data2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "data3",
        type: "uint256",
      },
    ],
    name: "setNewPurpose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "setPayableFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setPupshArray",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "setPureFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_newPurpose",
        type: "string",
      },
    ],
    name: "setPurpose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum YourContract.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c0604052601c60809081527f74686973206973206e65772064656661756c7420707572706f7365200000000060a0526001906200003e90826200011c565b5060405162000dc338038062000dc38339810160408190526200006191620001e8565b60006200006f82826200011c565b5050620002c4565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a257607f821691505b602082108103620000c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011757600081815260208120601f850160051c81016020861015620000f25750805b601f850160051c820191505b818110156200011357828155600101620000fe565b5050505b505050565b81516001600160401b0381111562000138576200013862000077565b62000150816200014984546200008d565b84620000c9565b602080601f8311600181146200018857600084156200016f5750858301515b600019600386901b1c1916600185901b17855562000113565b600085815260208120601f198616915b82811015620001b95788860151825594840194600190910190840162000198565b5085821015620001d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808385031215620001fc57600080fd5b82516001600160401b03808211156200021457600080fd5b818501915085601f8301126200022957600080fd5b8151818111156200023e576200023e62000077565b604051601f8201601f19908116603f0116810190838211818310171562000269576200026962000077565b8160405282815288868487010111156200028257600080fd5b600093505b82841015620002a6578484018601518185018701529285019262000287565b82841115620002b85760008684830101525b98975050505050505050565b610aef80620002d46000396000f3fe6080604052600436106100d55760003560e01c806370740aab11610079578063c785131b11610056578063c785131b146102e0578063cec16a1a14610300578063e9a8bae614610315578063eb68757f1461034257005b806370740aab1461027d57806371e5ee5f14610292578063753290a0146102c057005b8063302d432c116100b2578063302d432c1461018e578063363bf964146101de57806345a514a21461021f578063466f80331461025d57005b80631bff76d2146100de578063200d2ed2146100fe578063203cee5c1461012e57005b366100dc57005b005b3480156100ea57600080fd5b506100dc6100f9366004610665565b610362565b34801561010a57600080fd5b506003546101189060ff1681565b60405161012591906106c9565b60405180910390f35b34801561013a57600080fd5b506101816101493660046106f1565b5060408051808201909152601981527f636f6f6c20766965772072657475726e2066756e6374696f6e00000000000000602082015290565b604051610125919061072e565b34801561019a57600080fd5b506100dc6101a9366004610783565b600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b6101816101ec36600461079c565b604080518082019091526015815274031b7b7b6103a3434b99034b9903830bcb0b136329605d1b60208201529392505050565b61018161022d3660046106f1565b50604080518082019091526015815274031b7b7b6103a3434b99034b9903830bcb0b136329605d1b602082015290565b34801561026957600080fd5b506100dc6102783660046107df565b6103b1565b34801561028957600080fd5b506101816103eb565b34801561029e57600080fd5b506102b26102ad366004610783565b610479565b604051908152602001610125565b3480156102cc57600080fd5b506101816102db36600461082d565b61049a565b3480156102ec57600080fd5b506101816102fb36600461084f565b6104ee565b34801561030c57600080fd5b50610181610507565b34801561032157600080fd5b506103356103303660046106f1565b610514565b6040516101259190610871565b34801561034e57600080fd5b506100dc61035d3660046106f1565b61056e565b6001600160a01b0382166000908152600260205260409020610384828261093e565b50600080516020610a9a8339815191523360006040516103a59291906109fe565b60405180910390a15050565b60016103bd848261093e565b50600080516020610a9a8339815191523360006040516103de9291906109fe565b60405180910390a1505050565b600080546103f8906108b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610424906108b5565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b505050505081565b6004818154811061048957600080fd5b600091825260209091200154905081565b60038054606091849160ff191660018360048111156104bb576104bb6106b3565b0217905550600080516020610a9a8339815191523360006040516104e09291906109fe565b60405180910390a150919050565b600260205260009081526040902080546103f8906108b5565b600180546103f8906108b5565b6060600480548060200260200160405190810160405280929190818152602001828054801561056257602002820191906000526020600020905b81548152602001906001019080831161054e575b50505050509050919050565b600061057a828261093e565b50600080516020610a9a83398151915233600060405161059b9291906109fe565b60405180910390a150565b80356001600160a01b03811681146105bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126105e957600080fd5b813567ffffffffffffffff80821115610604576106046105c2565b604051601f8301601f19908116603f0116810190828211818310171561062c5761062c6105c2565b8160405283815286602085880101111561064557600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561067857600080fd5b610681836105a6565b9150602083013567ffffffffffffffff81111561069d57600080fd5b6106a9858286016105d8565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600583106106eb57634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561070357600080fd5b813567ffffffffffffffff81111561071a57600080fd5b610726848285016105d8565b949350505050565b600060208083528351808285015260005b8181101561075b5785810183015185820160400152820161073f565b8181111561076d576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561079557600080fd5b5035919050565b6000806000606084860312156107b157600080fd5b6107ba846105a6565b92506107c8602085016105a6565b91506107d6604085016105a6565b90509250925092565b6000806000606084860312156107f457600080fd5b833567ffffffffffffffff81111561080b57600080fd5b610817868287016105d8565b9660208601359650604090950135949350505050565b6000806040838503121561084057600080fd5b82356005811061068157600080fd5b60006020828403121561086157600080fd5b61086a826105a6565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156108a95783518352928401929184019160010161088d565b50909695505050505050565b600181811c908216806108c957607f821691505b6020821081036108e957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561093957600081815260208120601f850160051c810160208610156109165750805b601f850160051c820191505b8181101561093557828155600101610922565b5050505b505050565b815167ffffffffffffffff811115610958576109586105c2565b61096c8161096684546108b5565b846108ef565b602080601f8311600181146109a157600084156109895750858301515b600019600386901b1c1916600185901b178555610935565b600085815260208120601f198616915b828110156109d0578886015182559484019460019091019084016109b1565b50858210156109ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60018060a01b03831681526000602060408184015260008454610a20816108b5565b8060408701526060600180841660008114610a425760018114610a5c57610a8a565b60ff1985168984015283151560051b890183019550610a8a565b896000528660002060005b85811015610a825781548b8201860152908301908801610a67565b8a0184019650505b5093999850505050505050505056fe6ea5d6383a120235c7728a9a6751672a8ac068e4ed34dcca2ee444182c1812dea2646970667358221220b7576aa18d0e9b10b1b456d876aa6a88486b0579a217949491c720bacec8bcb964736f6c634300080f0033";

type YourContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YourContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YourContract__factory extends ContractFactory {
  constructor(...args: YourContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YourContract";
  }

  deploy(
    startingPurpose: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<YourContract> {
    return super.deploy(
      startingPurpose,
      overrides || {}
    ) as Promise<YourContract>;
  }
  getDeployTransaction(
    startingPurpose: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(startingPurpose, overrides || {});
  }
  attach(address: string): YourContract {
    return super.attach(address) as YourContract;
  }
  connect(signer: Signer): YourContract__factory {
    return super.connect(signer) as YourContract__factory;
  }
  static readonly contractName: "YourContract";
  public readonly contractName: "YourContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YourContractInterface {
    return new utils.Interface(_abi) as YourContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YourContract {
    return new Contract(address, _abi, signerOrProvider) as YourContract;
  }
}
